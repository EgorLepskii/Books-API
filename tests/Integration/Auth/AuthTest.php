<?php

namespace Tests\Integration\Auth;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\User;
use Carbon\Factory;
use Illuminate\Support\Facades\DB;

class AuthTest extends \Tests\TestCase
{
    public User $user;
    public $token;
    private $faker;

    private $email;

    private $password;

    protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutMiddleware(VerifyCsrfToken::class);

        $this->faker = \Faker\Factory::create();
        DB::beginTransaction();

        $this->email = $this->faker->email;
        $this->password = $this->faker->password;
        $name = $this->faker->name;


        $user = new User(
            [
                'email' => $this->email,
                'name' => $name,
                'password' => bcrypt($this->password)
            ]
        );
        $user->save();
        $this->user = $user;

        $data = $this->post(
            route('user.login'),
            [
                'email' => $this->email,
                'password' => $this->password
            ]
        );

        $this->token = json_decode($data->getContent())->access_token;

    }

    /**
     * Test user logout (user is not authorized)
     */
   /* public function testLogoutNotAuthorized(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->logout();
        $this->post(route('user.logout'))->assertStatus(403);
    }*/


    /**
     * Test user logout (user is authorized)
     */
    /*public function testLogoutAuthorized(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);
        $this->post(route('user.logout'))->assertStatus(200);
        $this->assertEmpty(auth()->user());
    }*/




    /**
     * Test refresh token
     * Assert, that expiration time of refreshed token
     * will be equals current time plus constant TOKEN_LIVE_TIME
     */
    /*public function testRefreshToken(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        $refreshedToken = json_decode(
            $this->post(
                route('user.refresh'),
                [
                    'email' => $this->email,
                    'password' => $this->password
                ]
            )->getContent()
        )->access_token;


        $this->assertNotEquals($this->token, $refreshedToken);

    }*/

    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
