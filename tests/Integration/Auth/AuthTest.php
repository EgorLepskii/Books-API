<?php

namespace Tests\Integration\Auth;

use App\Http\Controllers\AuthController;
use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class AuthTest extends \Tests\TestCase
{
    private $faker;
    private $email;
    private $password;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->email = $this->faker->email;
        $this->password = $this->faker->password;
        $name = $this->faker->name;


        $user = new User
        (
            [
                'email' => $this->email,
                'name' => $name,
                'password' => bcrypt($this->password)
            ]
        );
        $user->save();
        $this->user = $user;

        $data = $this->post
        (
            route('user.login'),
            [
                'email' => $this->email,
                'password' => $this->password
            ]
        );

        $this->token = json_decode($data->getContent())->access_token;

    }


    /**
     * Test user logout
     * @return void
     */
    public function testLogout(): void
    {
        $this->post(route('user.logout'))->assertSee('User successfully signed out');
        $this->assertEmpty(Auth::user());
    }


    /**
     * Test refresh token
     * Assert, that expiration time of refreshed token
     * will be equals current time plus constant TOKEN_LIVE_TIME
     * @return void
     */
    public function testRefreshToken()
    {
        $expTime = time() + AuthController::TOKEN_LIVE_TIME;

        $refreshedToken = json_decode($this->post
        (
            route('user.refresh'),
            [
                'email'=>$this->email,
                'password'=>$this->password
            ]
        )->getContent())->access_token;

        $tokenParts = explode('.',$refreshedToken);

        $refreshedTokenPayload = json_decode(base64_decode($tokenParts[1]));
        $this->assertEquals($refreshedTokenPayload->exp, $expTime);
    }

    public function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
