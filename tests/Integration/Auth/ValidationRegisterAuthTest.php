<?php

namespace Tests\Integration\Auth;

use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use function route;

class ValidationRegisterAuthTest extends \Tests\TestCase
{
    private $faker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

    }


    /**
     * Test registration query with incorrect data. Assert status 400
     * Assert, that model will not save in database
     * @dataProvider incorrectRegisterDataProvider
     * @param array $data
     * @return void
     */
    public function testIncorrectDataRegistration(array $data)
    {
        $this->post(route('user.register'), $data)->assertStatus(400);

        $user = new User();
        $user::query()->where('email', '=',$data['email'])->first();

        $this->assertEmpty($user->toArray());

    }


    /**
     * @return \array[][]
     */
    public function incorrectRegisterDataProvider(): array
    {
        $faker = Factory::create();
        $password = $faker->password;
        $passwordConfirm = $password;

        return
            [
                'empty_name' =>
                    [
                        [
                            'name' => '',
                            'email' => $faker->email,
                            'password' => $password,
                            'password_confirmation' => $passwordConfirm
                        ]
                    ],
                'empty_email' =>
                    [
                        [
                            'name' => $faker->name,
                            'email' => '',
                            'password' => $password,
                            'password_confirmation' => $passwordConfirm
                        ]
                    ],
                'empty_password' =>
                    [
                        ['name' => $faker->name,
                            'email' => $faker->email,
                            'password' => '',
                            'password_confirmation' => $passwordConfirm
                        ]
                    ],
                'passwords_confirm_error' =>
                    [
                        [
                            'name' => $faker->name,
                            'email' => $faker->email,
                            'password' => $password,
                            'password_confirmation' => $faker->password
                        ]
                    ],
            ];
    }

    /**
     * Test registration query with correct data. Assert status 401
     * Assert, that model will save in database
     * @dataProvider correctRegisterDataProvider
     * @param array $data
     * @return void
     */
    public function testCorrectDataRegistration(array $data)
    {
        $this->post(route('user.register'), $data)->assertStatus(201);
        $user = new User($data);

        $this->assertEquals
        (
            $data['email'],
            $user::query()->where('email','=',$data['email'])->first()->email
        );
    }


    /**
     * @return \array[][]
     */
    public function correctRegisterDataProvider(): array
    {
        $faker = Factory::create();
        $password = $faker->password;
        $passwordConfirm = $password;

        return
            [
                'correct_data' =>
                    [
                        [
                            'name' => $faker->name,
                            'email' => $faker->email,
                            'password' => $password,
                            'password_confirmation' => $passwordConfirm
                        ]

                    ],

            ];
    }


    public function tearDown(): void
    {
        DB::rollBack();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
