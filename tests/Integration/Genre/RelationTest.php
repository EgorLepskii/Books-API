<?php

namespace Tests\Integration\Genre;

use App\Models\Book;
use App\Models\Genre;
use Core\Constants;
use Faker\Factory;
use Illuminate\Support\Facades\DB;


class RelationTest extends \Tests\TestCase implements Constants
{
    private $faker;
    private Genre $genre;
    private Book $book;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->genre = new Genre(['name' => $this->faker->name]);
        $this->genre->save();


    }


    /**
     * Test genre->books hasMany relation
     * @return void
     */
    public function testGenreBookRelation()
    {
        $bookCount = 5;
        $books = [];

        for ($i = 0; $i < $bookCount; $i++)
        {
            $this->book = new Book
            (
                [
                    'name' => $this->faker->name,
                    'annotation' => $this->faker->name,
                    'authors' => $this->faker->name,
                    'price' => self::MAX_BOOK_PRICE,
                    'genreId' => $this->genre->getId()
                ]
            );
            $this->book->save();

            $books[] = $this->book;
        }

        $booksRelation = $this->genre->books()->get();

        $this->assertEquals(count($booksRelation),$bookCount);

        foreach ($booksRelation as $key => $book)
        {
            $this->assertEquals($book->name,$books[$key]->name);
        }

    }



    public function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
