<?php

namespace Tests\Integration\Book;

use App\Models\Book;
use App\Models\Genre;
use App\Models\User;
use Core\Constants;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use function bcrypt;
use function route;

class SimilarTest extends \Tests\TestCase implements Constants
{
    private $faker;
    private Genre $genre;
    private Book $book;
    private const PRICE_FOR_TEST = 100;
    private const LEFT_LIMIT = 70;
    private const RIGHT_LIMIT = 130;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->genre = new Genre(['name' => $this->faker->name]);
        $this->genre->save();
        $this->book = new Book
        (
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TEST,
                'genreId' => $this->genre->getId()
            ]
        );
        $this->book->save();
        $this->book->setBuilder();
    }


    /**
     * Assert, that book with correct price will be returned from function getSimilarByPrice
     * Assert, that books without of bounds will not be in getSimilarByPrice result
     * @return void
     */
    public function testSimilarPrice()
    {
        $flag = false;
        $bookWithCorrectPrice = new Book
        (
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TEST + 1,
                'genreId' => $this->genre->getId()
            ]
        );

        $bookWithIncorrectPriceRight = new Book
        (
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::RIGHT_LIMIT + 1,
                'genreId' => $this->genre->getId()
            ]
        );

        $bookWithIncorrectPriceLeft = new Book
        (
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::LEFT_LIMIT - 1,
                'genreId' => $this->genre->getId()
            ]
        );

        $bookWithCorrectPrice->save();
        $bookWithIncorrectPriceLeft->save();
        $bookWithIncorrectPriceRight->save();

        $similarBooks = $this->book
            ->getSimilarByPrice(self::LEFT_LIMIT, self::RIGHT_LIMIT)
            ->getBuilder()
            ->get();


        foreach ($similarBooks->toArray() as $item) {
            $this->assertNotEquals($item['name'], $bookWithIncorrectPriceLeft->name);
            $this->assertNotEquals($item['name'], $bookWithIncorrectPriceRight->name);

            if ($item['name'] == $bookWithCorrectPrice->name)
            {
                $flag = true;
            }
        }

        $this->assertTrue($flag);

    }


    /**
     * Assert, that book with the same genre will be found in getSimilarByGenre result
     * Assert, that book with other genre will not be found in getSimilarByGenre result
     * @return void
     */
    public function testSimilarGenre()
    {
        $genre = new Genre(['name' => $this->faker->name]);
        $genre->save();
        $correctBook = new Book
        (
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TEST + 1,
                'genreId' => $this->book->getGenreId()
            ]
        );

        $incorrectBook = new Book
        (
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::RIGHT_LIMIT + 1,
                'genreId' => $genre->getId()
            ]
        );

        $correctBook->save();
        $incorrectBook->save();
        $similarBooks = $this->book->getSimilarByGenre()->getBuilder()->get();

        foreach ($similarBooks->toArray() as $item) {
            $this->assertNotEquals($item['name'], $incorrectBook->getName());

            if ($item['name'] == $correctBook->name)
            {
                $flag = true;
            }
        }

       $this->assertTrue($flag);

    }


    public function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
