<?php

namespace Tests\Integration\BookPage;

use App\Http\Controllers\BookPageController;
use App\Models\Book;
use App\Models\Genre;
use App\Models\User;
use Core\Constants;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use function bcrypt;
use function route;

class ShowTest extends \Tests\TestCase implements Constants
{
    private $faker;

    private Genre $genre;

    private Book $book;

    /**
     * @var int
     */
    private const PRICE_FOR_TEST = 100;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();
        $this->genre = new Genre(['name' => $this->faker->name]);
        $this->genre->save();

        $book = new Book(
            [
                'name' => $this->faker->firstName,
                'annotation' => $this->faker->streetName,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TEST,
                'isHidden' => false,
                'genreId' => $this->genre->getId()
            ]
        );

        $this->book = $book;
        $this->book->save();
    }


    public function testSimilarBooks(): void
    {
        $priceDifference = $this->book->getPrice() * (BookPageController::SIMILAR_PRICE_DIFFERENCE / 100);
        $genre = new Genre(['name' => $this->faker->name]);
        $genre->save();

        $correctBook = new Book(
            [
                'name' => $this->faker->firstName,
                'annotation' => $this->faker->streetName,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TEST,
                'isHidden' => false,
                'genreId' => $this->book->getGenreId()
            ]
        );
        $incorrectBookLeftPrice = new Book(
            [
                    'name' => $this->faker->firstName,
                    'annotation' => $this->faker->streetName,
                    'authors' => $this->faker->name,
                    'price' => $this->book->getPrice() - $priceDifference - 1,
                    'isHidden' => false,
                    'genreId' => $this->book->getGenreId()
                ]
        );

        $incorrectBookRightPrice = new Book(
            [
                    'name' => $this->faker->firstName,
                    'annotation' => $this->faker->streetName,
                    'authors' => $this->faker->name,
                    'price' => $this->book->getPrice() + $priceDifference + 1,
                    'isHidden' => false,
                    'genreId' => $this->book->getGenreId()
                ]
        );

        $incorrectBookGenre = new Book(
            [
                'name' => $this->faker->firstName,
                'annotation' => $this->faker->streetName,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TEST,
                'isHidden' => false,
                'genreId' => $genre->getId()
            ]
        );


        $correctBook->save();
        $incorrectBookLeftPrice->save();
        $incorrectBookRightPrice->save();
        $incorrectBookGenre->save();

        $response = $this->get(route('bookPage.show', $this->book->getId()));
        $response->assertSee($correctBook->getName());
        $response->assertDontSee($incorrectBookGenre->getName());
        $response->assertDontSee($incorrectBookRightPrice->getName());
        $response->assertDontSee($incorrectBookLeftPrice->getName());

    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
