<?php

namespace Tests\Integration\BookPage;

use App\Http\Controllers\BookPageController;
use App\Models\Book;
use App\Models\Genre;
use App\Models\User;
use Core\Constants;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use function bcrypt;
use function route;

class IndexTest extends \Tests\TestCase implements Constants
{
    private $faker;

    private Genre $genre;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->genre = new Genre(['name'=>$this->faker->name]);
        $this->genre->save();
    }

    public function testCorrectBooksNumber(): void
    {
        for($i = 0; $i < 6; ++$i)
        {
            $book = new Book(
                [
                   'name' => $this->faker->firstName,
                   'annotation' => $this->faker->streetName,
                   'authors' => $this->faker->name,
                   'price' => $this->faker->numberBetween(self::MIN_BOOK_PRICE, self::MAX_BOOK_PRICE),
                   'isHidden' => false,
                   'genreId' => $this->genre->getId()

                ]
            );

            $book->save();
        }

        $books = json_decode($this->get(route('bookPage.index'))->getContent());
        $this->assertEquals(count(((array)$books)['books']), BookPageController::MAX_SHOW_PRODUCT_COUNT);

    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
