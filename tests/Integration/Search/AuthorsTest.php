<?php

namespace Tests\Integration\Search;

use App\Models\Book;
use App\Models\Genre;
use Core\Constants;
use Faker\Factory;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Lang;

class AuthorsTest extends \Tests\TestCase implements Constants
{
    use WithoutMiddleware;

    private $faker;

    private Genre $genre;

    private Book $book;

    /**
     * @var string
     */
    private const TEST_NAME = "iFUGpX1bCO29+A";


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->genre = new Genre(['name' => $this->faker->name]);
        $this->genre->save();

        $this->book = new Book(
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => self::TEST_NAME,
                'price' => 0,
                'isHidden' => false,
                'genreId' => $this->genre->getId()
            ]
        );
        $this->book->setBuilder();

        $this->book->save();
    }


    /**
     * Test books with names, that contains string of searching name
     *
     * @dataProvider dataProvider
     * @param        array<string, true>|array<string, int>|array<string, string> $data
     */
    public function test_similar_books_correct(array $data): void
    {
        $data['genreId'] = $this->genre->getId();
        $book = new Book($data);
        $book->save();

        $books = $this->book->searchByAuthors($this->book->authors)->getBuilder()->get();
        $this->assertEquals($books[0]->getName(), $book->getName());
    }

    /**
     * @return array{substr_in_begin: array<int, array{name: string, annotation: string, authors: string, price: int, isHidden: true, genreId: int}>, substr_in_middle: array<int, array{name: string, annotation: string, authors: string, price: int, isHidden: true, genreId: int}>, substr_in_end: array<int, array{name: string, annotation: string, authors: string, price: int, isHidden: true, genreId: int}>, substr_lower_case: array<int, array{name: string, annotation: string, authors: string, price: int, isHidden: true, genreId: int}>}
     */
    public function dataProvider(): array
    {
        $faker = Factory::create();
        return
            [
                'substr_in_begin' =>
                    [
                        [
                            'name' => $faker->name,
                            'annotation' => $faker->name,
                            'authors' => self::TEST_NAME . $faker->name,
                            'price' => 0,
                            'isHidden' => false,
                            'genreId' => 0
                        ]
                    ],

                'substr_in_middle' =>
                    [
                        [
                            'name' => $faker->name,
                            'annotation' => $faker->name,
                            'authors' => $faker->name.self::TEST_NAME . $faker->name,
                            'price' => 0,
                            'isHidden' => false,
                            'genreId' => 0
                        ]
                    ],

                'substr_in_end' =>
                    [
                        [
                            'name' => $faker->name,
                            'annotation' => $faker->name,
                            'authors' => $faker->name.self::TEST_NAME,
                            'price' => 0,
                            'isHidden' => false,
                            'genreId' => 0
                        ]
                    ],

                'substr_lower_case' =>
                    [
                        [
                            'name' => $faker->name,
                            'annotation' => $faker->name,
                            'authors' => $faker->name.self::TEST_NAME,
                            'price' => 0,
                            'isHidden' => false,
                            'genreId' => 0
                        ]
                    ]
            ];
    }


    /**
     * Test books with names, that not contains string of searching name
     *
     * @dataProvider dataProviderIncorrect
     * @param        array<string, true>|array<string, int>|array<string, string> $data
     */
    public function test_similar_books_incorrect(array $data): void
    {
        $data['genreId'] = $this->genre->getId();
        $book = new Book($data);
        $book->save();

        $books = $this->book->searchByAuthors($this->book->authors)->getBuilder()->get();
        $this->assertEmpty($books->toArray());
    }

    /**
     * @return array{incorrect_substr: array<int, array{name: string, annotation: string, authors: string, price: int, isHidden: true, genreId: int}>}
     */
    public function dataProviderIncorrect(): array
    {
        $faker = Factory::create();
        return
            [
                'incorrect_substr' =>
                    [
                        [
                            'name' => $faker->name,
                            'annotation' => $faker->name,
                            'authors' => $faker->name,
                            'price' => 0,
                            'isHidden' => false,
                            'genreId' => 0
                        ]
                    ],

            ];
    }




    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
