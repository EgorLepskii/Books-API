<?php

namespace Tests\Integration\Search;

use App\Models\Book;
use App\Models\Genre;
use Core\Constants;
use Faker\Factory;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Lang;
use function _PHPStan_ae8980142\RingCentral\Psr7\uri_for;

class SearchControllerTest extends \Tests\TestCase implements Constants
{
    use WithoutMiddleware;

    private $faker;
    private Genre $genre;
    private Book $book;
    private const PRICE_FOR_TESTS = 100;
    private const PRICE_DIFFERENCE = 30;
    private const NAME_FOR_TESTS = "7voEKIWfZMlNHg";
    private const AUTHORS_FOR_TESTS = 'iFUGpX1bCO29+A';


    /**
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->genre = new Genre(['name' => $this->faker->name]);
        $this->genre->save();
        $this->book = new Book
        (
            [
                'name' => $this->faker->lexify('???').self::NAME_FOR_TESTS.$this->faker->lexify('???'),
                'annotation' => $this->faker->name,
                'authors' => $this->faker->lexify('???').self::AUTHORS_FOR_TESTS,
                'price' => self::PRICE_FOR_TESTS,
                'isHidden' => false,
                'genreId' => $this->genre->getId()
            ]
        );

        $this->book->setBuilder();
        $this->book->save();
    }


    /**
     * @dataProvider correctDataProvider
     * @param array $data
     * @return void
     */
    public function test_correct(array $params)
    {
        $response = $this->get(route('bookSearch.index', $params))->assertSee($this->book->getName());
    }

    public function correctDataProvider()
    {
        $faker = Factory::create();
        return
            [
                'all_fields' =>
                    [
                        [
                            'name' => self::NAME_FOR_TESTS,
                            'authors' => self::AUTHORS_FOR_TESTS,
                            'leftPrice' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE,
                            'rightPrice' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE
                        ]

                    ],

                'name_substr' =>
                    [
                        [
                            'name' => substr(self::NAME_FOR_TESTS,0,2),
                            'authors' => substr(self::AUTHORS_FOR_TESTS, 0,3),
                            'leftPrice' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE,
                            'rightPrice' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE
                        ]

                    ],

                'other_register' =>
                    [
                        [
                            'name' => strtolower(self::NAME_FOR_TESTS),
                            'authors' =>strtolower(self::AUTHORS_FOR_TESTS),
                            'leftPrice' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE,
                            'rightPrice' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE
                        ]

                    ],
            ];
    }


    /**
     * @dataProvider incorrectDataProvider
     * @param array $data
     * @return void
     */
    public function test_incorrect(array $params)
    {
        $response = $this->get(route('bookSearch.index', $params))->assertDontSee($this->book->getName());
    }

    public function incorrectDataProvider()
    {
        $faker = Factory::create();
        return
            [

                'name_substring_skipped' =>
                    [
                        [
                            'name' => $faker->lexify('???'),
                            'authors' => strtolower(self::AUTHORS_FOR_TESTS),
                            'leftPrice' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE,
                            'rightPrice' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE
                        ]

                    ],
                'authors_substring_skipped' =>
                    [
                        [
                            'name' => self::NAME_FOR_TESTS,
                            'authors' => $faker->lexify("??????"),
                            'leftPrice' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE,
                            'rightPrice' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE
                        ]

                    ],
            ];
    }

    /**
     * @return void
     */
    public function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
