<?php

namespace Tests\Integration\Search;

use App\Models\Book;
use App\Models\Genre;
use Core\Constants;
use Faker\Factory;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Lang;

class PriceTest extends \Tests\TestCase implements Constants
{
    use WithoutMiddleware;

    private $faker;

    private Genre $genre;

    private Book $book;

    /**
     * @var float
     */
    private const PRICE_FOR_TESTS = 100.5;

    /**
     * @var int
     */
    private const PRICE_DIFFERENCE = 30;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->genre = new Genre(['name' => $this->faker->name]);
        $this->genre->save();

        $this->book = new Book(
            [
                'name' => $this->faker->name,
                'annotation' => $this->faker->name,
                'authors' => $this->faker->name,
                'price' => self::PRICE_FOR_TESTS,
                'isHidden' => false,
                'genreId' => $this->genre->getId()
            ]
        );

        $this->book->setBuilder();
        $this->book->save();
    }

    /**
     * @dataProvider correctDataProvider
     * @param        array<string, true>|array<string, float>|array<string, int>|array<string, string> $data
     */
    public function test_correct_data(array $data): void
    {
        $data['genreId'] = $this->genre->getId();
        $book = new Book($data);
        $book->save();

        $leftPrice = self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE;
        $rightLimit = self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE;

        $books = $this->book->searchByPrice($leftPrice, $rightLimit)->getBuilder()->get();

        $flag = false;

        foreach ($books as $book) {
            if ($book->getName() == $book->getName()) {
                $flag = true;
            }
        }

        $this->assertTrue($flag);


    }


    /**
     * @return array{left_limit: array<int, array{name: string, annotation: string, authors: string, price: float, isHidden: true, genreId: int}>, right_limit: array<int, array{name: string, annotation: string, authors: string, price: float, isHidden: true, genreId: int}>}
     */
    public function correctDataProvider(): array
    {
        $faker = Factory::create();
        return
            [
                'left_limit' => [
                    [
                        'name' => $faker->name,
                        'annotation' => $faker->name,
                        'authors' => $faker->name,
                        'price' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE,
                        'isHidden' => false,
                        'genreId' => 0
                    ]

                ],

                'right_limit' => [
                    [
                        'name' => $faker->name,
                        'annotation' => $faker->name,
                        'authors' => $faker->name,
                        'price' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE,
                        'isHidden' => false,
                        'genreId' => 0
                    ]

                ]

            ];
    }


    /**
     * @dataProvider incorrectDataProvider
     * @param        array<string, true>|array<string, float>|array<string, int>|array<string, string> $data
     */
    public function test_incorrect_data(array $data): void
    {
        $data['genreId'] = $this->genre->getId();
        $book = new Book($data);
        $book->save();

        $leftPrice = self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE;
        $rightLimit = self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE;

        $books = $this->book->searchByPrice($leftPrice, $rightLimit)->getBuilder()->get();

        $flag = true;

        foreach ($books as $item) {
            if ($book->getName() == $item->getName()) {
                $flag = false;
            }
        }

        $this->assertTrue($flag);


    }


    /**
     * @return array{left_limit: array<int, array{name: string, annotation: string, authors: string, price: float, isHidden: true, genreId: int}>, right_limit: array<int, array{name: string, annotation: string, authors: string, price: float, isHidden: true, genreId: int}>}
     */
    public function incorrectDataProvider(): array
    {
        $faker = Factory::create();
        return
            [
                'left_limit' => [
                    [
                        'name' => $faker->name,
                        'annotation' => $faker->name,
                        'authors' => $faker->name,
                        'price' => self::PRICE_FOR_TESTS - self::PRICE_DIFFERENCE - 1.5,
                        'isHidden' => false,
                        'genreId' => 0
                    ]

                ],

                'right_limit' => [
                    [
                        'name' => $faker->name,
                        'annotation' => $faker->name,
                        'authors' => $faker->name,
                        'price' => self::PRICE_FOR_TESTS + self::PRICE_DIFFERENCE + 1.5,
                        'isHidden' => false,
                        'genreId' => 0
                    ]

                ]

            ];
    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
